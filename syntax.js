
export const tokenTypes = [
  { type: "script_opener", value: "${", test: /\${/ },
  { type: "new_line", value: true, test: /\r\n|\r|\n/ },
  { type: "document_object", test: /<[^/\s+0-9!][^>]*>/ },
  // { type: "document_object_closer", test: /<\/[^/!][^>]*>/ },
  { type: "boolean", value: true, test: /true/ },
  { type: "boolean", value: false, test: /false/ },
  { type: "not", value: null, test: /not/ },
  { type: "null", value: null, test: /null/ },
  { type: "undefined", value: undefined, test: /undefined/ },
  { type: "number", value: null, test: /NaN/ },
  { type: "number", value: null, test: /Infinity/ },
  { type: "number", value: null, test: /-Infinity/ },
  { type: "number", value: null, test: /[0-9]+(\.[0-9]+)?/ },
  // { type: "server_shaper", value: null, test: /:[^:]*?>/ },
  // { type: "client_shaper", value: null, test: /::[^]*?>/ },
  { type: "string", value: null, test: /"(?:\\.|[^"])*"/ },
  { type: "string", value: null, test: /'(?:\\.|[^'])*'/ },
  { type: "comment", value: null, test: /\/\/.*$/m },
  { type: "whitespace", value: null, test: /\s+/ },
  { type: "open_paren", value: "(", test: /\(/ },
  { type: "close_paren", value: ")", test: /\)/ },
  { type: "comma", value: ",", test: /,/ },
  { type: "semicolon", value: ";", test: /;/ },
  { type: "open_bracket", value: "[", test: /\[/ },
  { type: "close_bracket", value: "]", test: /\]/ },
  { type: "open_curly", value: "{", test: /{/ },
  { type: "close_curly", value: "}", test: /}/ },
  { type: "dot", value: ".", test: /\./ },
  { type: "colon", value: ":", test: /:/ },
  { type: "equals", value: "=", test: /=/ },
  { type: "plus", value: "+", test: /\+/ },
  { type: "minus", value: "-", test: /-/ },
  { type: "star", value: "*", test: /\*/ },
  { type: "forward_slash", value: "/", test: /\// },
  { type: "back_slash", value: "\\", test: /\\/ },
  { type: "modulo", value: "%", test: /%/ },
  { type: "and", value: "&&", test: /&&/ },
  { type: "or", value: "||", test: /\|\|/ },
  { type: "not", value: "!", test: /!/ },
  { type: "question", value: "?", test: /\?/ },
  { type: "less_than", value: "<", test: /</ },
  { type: "greater_than", value: ">", test: />/ },
  { type: "less_than_or_equal", value: "<=", test: /<=/ },
  { type: "greater_than_or_equal", value: ">=", test: />=/ },
  { type: "equals_equals", value: "==", test: /==/ },
  { type: "not_equals", value: "!=", test: /!=/ },
  { type: "equals_equals_equals", value: "===", test: /===/ },
  { type: "not_equals_equals", value: "!==", test: /!==/ },
  { type: "arrow", value: "=>", test: /=>/ },
  { type: "hash_tag", value: "#", test: /#/ },
  { type: "keyword", value: "component", test: /component/},
  { type: "word", value: null, test: /[a-zA-Z_$][a-zA-Z0-9_$]*/ },
];

export const elementTypes = [
  {
    elType: "html",
    category: "document_structure",
    openTest: /<html/,
    closeTest: /<\/html>/,
  },
  {
    elType: "head",
    category: "document_structure",
    openTest: /<head>/,
    closeTest: /<\/head>/,
  },
  {
    elType: "title",
    category: "document_structure",
    openTest: /<title>/,
    closeTest: /<\/title>/,
  },
  {
    elType: "meta",
    category: "document_structure",
    openTest: /<meta>/,
    closeTest: /<\/meta>/,
  },
  {
    elType: "link",
    category: "document_structure",
    openTest: /<link>/,
    closeTest: /<\/link>/,
  },
  {
    elType: "style",
    category: "document_structure",
    openTest: /<style>/,
    closeTest: /<\/style>/,
  },
  {
    elType: "script",
    category: "document_structure",
    openTest: /<script>/,
    closeTest: /<\/script>/,
  },
  {
    elType: "noscript",
    category: "document_structure",
    openTest: /<noscript>/,
    closeTest: /<\/noscript>/,
  },
  {
    elType: "body",
    category: "document_structure",
    openTest: /<body>/,
    closeTest: /<\/body>/,
  },
  {
    elType: "article",
    category: "semantic_elements",
    openTest: /<article>/,
    closeTest: /<\/article>/,
  },
  {
    elType: "section",
    category: "semantic_elements",
    openTest: /<section>/,
    closeTest: /<\/section>/,
  },
  {
    elType: "nav",
    category: "semantic_elements",
    openTest: /<nav>/,
    closeTest: /<\/nav>/,
  },
  {
    elType: "aside",
    category: "semantic_elements",
    openTest: /<aside>/,
    closeTest: /<\/aside>/,
  },
  {
    elType: "header",
    category: "semantic_elements",
    openTest: /<header>/,
    closeTest: /<\/header>/,
  },
  {
    elType: "footer",
    category: "semantic_elements",
    openTest: /<footer>/,
    closeTest: /<\/footer>/,
  },
  {
    elType: "main",
    category: "semantic_elements",
    openTest: /<main>/,
    closeTest: /<\/main>/,
  },
  {
    elType: "address",
    category: "semantic_elements",
    openTest: /<address>/,
    closeTest: /<\/address>/,
  },
  { elType: "h1", category: "headings", openTest: /<h1>/, closeTest: /<\/h1>/ },
  { elType: "h2", category: "headings", openTest: /<h2>/, closeTest: /<\/h2>/ },
  { elType: "h3", category: "headings", openTest: /<h3>/, closeTest: /<\/h3>/ },
  { elType: "h4", category: "headings", openTest: /<h4>/, closeTest: /<\/h4>/ },
  { elType: "h5", category: "headings", openTest: /<h5>/, closeTest: /<\/h5>/ },
  { elType: "h6", category: "headings", openTest: /<h6>/, closeTest: /<\/h6>/ },
  {
    elType: "div",
    category: "text_content",
    openTest: /<div>/,
    closeTest: /<\/div>/,
  },
  {
    elType: "p",
    category: "text_content",
    openTest: /<p>/,
    closeTest: /<\/p>/,
  },
  {
    elType: "hr",
    category: "text_content",
    openTest: /<hr>/,
    closeTest: /<\/hr>/,
  },
  {
    elType: "pre",
    category: "text_content",
    openTest: /<pre>/,
    closeTest: /<\/pre>/,
  },
  {
    elType: "blockquote",
    category: "text_content",
    openTest: /<blockquote>/,
    closeTest: /<\/blockquote>/,
  },
  { elType: "ol", category: "lists", openTest: /<ol>/, closeTest: /<\/ol>/ },
  { elType: "ul", category: "lists", openTest: /<ul>/, closeTest: /<\/ul>/ },
  { elType: "li", category: "lists", openTest: /<li>/, closeTest: /<\/li>/ },
  { elType: "dl", category: "lists", openTest: /<dl>/, closeTest: /<\/dl>/ },
  { elType: "dt", category: "lists", openTest: /<dt>/, closeTest: /<\/dt>/ },
  { elType: "dd", category: "lists", openTest: /<dd>/, closeTest: /<\/dd>/ },
  {
    elType: "figure",
    category: "figures",
    openTest: /<figure>/,
    closeTest: /<\/figure>/,
  },
  {
    elType: "figcaption",
    category: "figures",
    openTest: /<figcaption>/,
    closeTest: /<\/figcaption>/,
  },
  {
    elType: "a",
    category: "inline_text_semantics",
    openTest: /<a>/,
    closeTest: /<\/a>/,
  },
  {
    elType: "em",
    category: "inline_text_semantics",
    openTest: /<em>/,
    closeTest: /<\/em>/,
  },
  {
    elType: "strong",
    category: "inline_text_semantics",
    openTest: /<strong>/,
    closeTest: /<\/strong>/,
  },
  {
    elType: "small",
    category: "inline_text_semantics",
    openTest: /<small>/,
    closeTest: /<\/small>/,
  },
  {
    elType: "s",
    category: "inline_text_semantics",
    openTest: /<s>/,
    closeTest: /<\/s>/,
  },
  {
    elType: "cite",
    category: "inline_text_semantics",
    openTest: /<cite>/,
    closeTest: /<\/cite>/,
  },
  {
    elType: "q",
    category: "inline_text_semantics",
    openTest: /<q>/,
    closeTest: /<\/q>/,
  },
  {
    elType: "dfn",
    category: "inline_text_semantics",
    openTest: /<dfn>/,
    closeTest: /<\/dfn>/,
  },
  {
    elType: "abbr",
    category: "inline_text_semantics",
    openTest: /<abbr>/,
    closeTest: /<\/abbr>/,
  },
  {
    elType: "ruby",
    category: "inline_text_semantics",
    openTest: /<ruby>/,
    closeTest: /<\/ruby>/,
  },
  {
    elType: "rt",
    category: "inline_text_semantics",
    openTest: /<rt>/,
    closeTest: /<\/rt>/,
  },
  {
    elType: "rp",
    category: "inline_text_semantics",
    openTest: /<rp>/,
    closeTest: /<\/rp>/,
  },
  {
    elType: "data",
    category: "inline_text_semantics",
    openTest: /<data>/,
    closeTest: /<\/data>/,
  },
  {
    elType: "time",
    category: "inline_text_semantics",
    openTest: /<time>/,
    closeTest: /<\/time>/,
  },
  {
    elType: "code",
    category: "inline_text_semantics",
    openTest: /<code>/,
    closeTest: /<\/code>/,
  },
  {
    elType: "var",
    category: "inline_text_semantics",
    openTest: /<var>/,
    closeTest: /<\/var>/,
  },
  {
    elType: "samp",
    category: "inline_text_semantics",
    openTest: /<samp>/,
    closeTest: /<\/samp>/,
  },
  {
    elType: "kbd",
    category: "inline_text_semantics",
    openTest: /<kbd>/,
    closeTest: /<\/kbd>/,
  },
  {
    elType: "sub",
    category: "inline_text_semantics",
    openTest: /<sub>/,
    closeTest: /<\/sub>/,
  },
  {
    elType: "sup",
    category: "inline_text_semantics",
    openTest: /<sup>/,
    closeTest: /<\/sup>/,
  },
  {
    elType: "i",
    category: "inline_text_semantics",
    openTest: /<i>/,
    closeTest: /<\/i>/,
  },
  {
    elType: "b",
    category: "inline_text_semantics",
    openTest: /<b>/,
    closeTest: /<\/b>/,
  },
  {
    elType: "u",
    category: "inline_text_semantics",
    openTest: /<u>/,
    closeTest: /<\/u>/,
  },
  {
    elType: "mark",
    category: "inline_text_semantics",
    openTest: /<mark>/,
    closeTest: /<\/mark>/,
  },
  {
    elType: "bdi",
    category: "inline_text_semantics",
    openTest: /<bdi>/,
    closeTest: /<\/bdi>/,
  },
  {
    elType: "bdo",
    category: "inline_text_semantics",
    openTest: /<bdo>/,
    closeTest: /<\/bdo>/,
  },
  {
    elType: "span",
    category: "inline_text_semantics",
    openTest: /<span>/,
    closeTest: /<\/span>/,
  },
  {
    elType: "br",
    category: "inline_text_semantics",
    openTest: /<br>/,
    closeTest: /<\/br>/,
  },
  {
    elType: "wbr",
    category: "inline_text_semantics",
    openTest: /<wbr>/,
    closeTest: /<\/wbr>/,
  },
  {
    elType: "ins",
    category: "inline_text_semantics",
    openTest: /<ins>/,
    closeTest: /<\/ins>/,
  },
  {
    elType: "del",
    category: "inline_text_semantics",
    openTest: /<del>/,
    closeTest: /<\/del>/,
  },
  {
    elType: "picture",
    category: "media",
    openTest: /<picture>/,
    closeTest: /<\/picture>/,
  },
  {
    elType: "source",
    category: "media",
    openTest: /<source>/,
    closeTest: /<\/source>/,
  },
  { elType: "img", category: "media", openTest: /<img>/, closeTest: /<\/img>/ },
  {
    elType: "iframe",
    category: "media",
    openTest: /<iframe>/,
    closeTest: /<\/iframe>/,
  },
  {
    elType: "embed",
    category: "media",
    openTest: /<embed>/,
    closeTest: /<\/embed>/,
  },
  {
    elType: "object",
    category: "media",
    openTest: /<object>/,
    closeTest: /<\/object>/,
  },
  {
    elType: "param",
    category: "media",
    openTest: /<param>/,
    closeTest: /<\/param>/,
  },
  {
    elType: "video",
    category: "media",
    openTest: /<video>/,
    closeTest: /<\/video>/,
  },
  {
    elType: "audio",
    category: "media",
    openTest: /<audio>/,
    closeTest: /<\/audio>/,
  },
  {
    elType: "track",
    category: "media",
    openTest: /<track>/,
    closeTest: /<\/track>/,
  },
  { elType: "map", category: "media", openTest: /<map>/, closeTest: /<\/map>/ },
  {
    elType: "area",
    category: "media",
    openTest: /<area>/,
    closeTest: /<\/area>/,
  },
  {
    elType: "table",
    category: "tables",
    openTest: /<table>/,
    closeTest: /<\/table>/,
  },
  {
    elType: "caption",
    category: "tables",
    openTest: /<caption>/,
    closeTest: /<\/caption>/,
  },
  {
    elType: "colgroup",
    category: "tables",
    openTest: /<colgroup>/,
    closeTest: /<\/colgroup>/,
  },
  {
    elType: "col",
    category: "tables",
    openTest: /<col>/,
    closeTest: /<\/col>/,
  },
  {
    elType: "tbody",
    category: "tables",
    openTest: /<tbody>/,
    closeTest: /<\/tbody>/,
  },
  {
    elType: "thead",
    category: "tables",
    openTest: /<thead>/,
    closeTest: /<\/thead>/,
  },
  {
    elType: "tfoot",
    category: "tables",
    openTest: /<tfoot>/,
    closeTest: /<\/tfoot>/,
  },
  { elType: "tr", category: "tables", openTest: /<tr>/, closeTest: /<\/tr>/ },
  { elType: "td", category: "tables", openTest: /<td>/, closeTest: /<\/td>/ },
  { elType: "th", category: "tables", openTest: /<th>/, closeTest: /<\/th>/ },
  {
    elType: "form",
    category: "forms",
    openTest: /<form>/,
    closeTest: /<\/form>/,
  },
  {
    elType: "fieldset",
    category: "forms",
    openTest: /<fieldset>/,
    closeTest: /<\/fieldset>/,
  },
  {
    elType: "legend",
    category: "forms",
    openTest: /<legend>/,
    closeTest: /<\/legend>/,
  },
  {
    elType: "label",
    category: "forms",
    openTest: /<label>/,
    closeTest: /<\/label>/,
  },
  {
    elType: "input",
    category: "forms",
    openTest: /<input>/,
    closeTest: /<\/input>/,
  },
  {
    elType: "button",
    category: "forms",
    openTest: /<button>/,
    closeTest: /<\/button>/,
  },
  {
    elType: "select",
    category: "forms",
    openTest: /<select>/,
    closeTest: /<\/select>/,
  },
  {
    elType: "datalist",
    category: "forms",
    openTest: /<datalist>/,
    closeTest: /<\/datalist>/,
  },
  {
    elType: "optgroup",
    category: "forms",
    openTest: /<optgroup>/,
    closeTest: /<\/optgroup>/,
  },
  {
    elType: "option",
    category: "forms",
    openTest: /<option>/,
    closeTest: /<\/option>/,
  },
  {
    elType: "textarea",
    category: "forms",
    openTest: /<textarea>/,
    closeTest: /<\/textarea>/,
  },
  {
    elType: "output",
    category: "forms",
    openTest: /<output>/,
    closeTest: /<\/output>/,
  },
  {
    elType: "progress",
    category: "forms",
    openTest: /<progress>/,
    closeTest: /<\/progress>/,
  },
  {
    elType: "meter",
    category: "forms",
    openTest: /<meter>/,
    closeTest: /<\/meter>/,
  },
  {
    elType: "details",
    category: "interactive_elements",
    openTest: /<details>/,
    closeTest: /<\/details>/,
  },
  {
    elType: "summary",
    category: "interactive_elements",
    openTest: /<summary>/,
    closeTest: /<\/summary>/,
  },
  {
    elType: "dialog",
    category: "interactive_elements",
    openTest: /<dialog>/,
    closeTest: /<\/dialog>/,
  },
  {
    elType: "menu",
    category: "interactive_elements",
    openTest: /<menu>/,
    closeTest: /<\/menu>/,
  },
  {
    elType: "menuitem",
    category: "interactive_elements",
    openTest: /<menuitem>/,
    closeTest: /<\/menuitem>/,
  },
  {
    elType: "template",
    category: "modern_elements",
    openTest: /<template>/,
    closeTest: /<\/template>/,
  },
  {
    elType: "slot",
    category: "modern_elements",
    openTest: /<slot>/,
    closeTest: /<\/slot>/,
  },
];

export const elTypeAr = elementTypes.map((el) => el.elType)
/*
export const tokenTypes = [
  { type: "new_line", value: true, test: /\r\n|\r|\n/ },
  // { type: "document_object", test: /<[^/!][^>]*>/ },
  // { type: "document_object_closer", test: /<\/[^/!][^>]*>/ },
  { type: "boolean", value: true, test: /true/ },
  { type: "boolean", value: false, test: /false/ },
  { type: "not", value: null, test: /not/ },
  { type: "null", value: null, test: /null/ },
  { type: "undefined", value: undefined, test: /undefined/ },
  { type: "number", value: null, test: /NaN/ },
  { type: "number", value: null, test: /Infinity/ },
  { type: "number", value: null, test: /-Infinity/ },
  { type: "number", value: null, test: /[0-9]+(\.[0-9]+)?/ },
  // { type: "server_shaper", value: null, test: /:[^:]*?>/ },
  // { type: "client_shaper", value: null, test: /::[^]*?>/ },
  { type: "string", value: null, test: /"(?:\\.|[^"])*"/ },
  { type: "string", value: null, test: /'(?:\\.|[^'])*'/ },
  { type: "comment", value: null, test: /\/\/.*$/m },
  { type: "whitespace", value: null, test: /\s+/ },
  { type: "open_paren", value: "(", test: /\(/ },
  { type: "close_paren", value: ")", test: /\)/ },
  { type: "comma", value: ",", test: /,/ },
  { type: "semicolon", value: ";", test: /;/ },
  { type: "open_bracket", value: "[", test: /\[/ },
  { type: "close_bracket", value: "]", test: /\]/ },
  { type: "open_curly", value: "{", test: /{/ },
  { type: "close_curly", value: "}", test: /}/ },
  { type: "dot", value: ".", test: /\./ },
  { type: "colon", value: ":", test: /:/ },
  { type: "equals", value: "=", test: /=/ },
  { type: "plus", value: "+", test: /\+/ },
  { type: "minus", value: "-", test: /-/ },
  { type: "star", value: "*", test: /\*/ /* },
  { type: "forward_slash", value: "/", test: /\// },
  { type: "back_slash", value: "\\", test: /\\/ },
  { type: "modulo", value: "%", test: /%/ },
  { type: "and", value: "&&", test: /&&/ },
  { type: "or", value: "||", test: /\|\|/ },
  { type: "not", value: "!", test: /!/ },
  { type: "question", value: "?", test: /\?/ },
  { type: "less_than", value: "<", test: /</ },
  { type: "greater_than", value: ">", test: />/ },
  { type: "less_than_or_equal", value: "<=", test: /<=/ },
  { type: "greater_than_or_equal", value: ">=", test: />=/ },
  { type: "equals_equals", value: "==", test: /==/ },
  { type: "not_equals", value: "!=", test: /!=/ },
  { type: "equals_equals_equals", value: "===", test: /===/ },
  { type: "not_equals_equals", value: "!==", test: /!==/ },
  { type: "arrow", value: "=>", test: /=>/ },
  { type: "hash_tag", value: "#", test: /#/ },
  { type: "keyword", value: "if", test: /if/ },
  { type: "keyword", value: "else", test: /else/ },
  { type: "keyword", value: "switch", test: /switch/ },
  { type: "keyword", value: "case", test: /case/ },
  { type: "keyword", value: "default", test: /default/ },
  { type: "keyword", value: "break", test: /^break$/ },
  { type: "keyword", value: "continue", test: /^continue$/ },
  { type: "keyword", value: "return", test: /^return$/ },
  { type: "keyword", value: "throw", test: /throw/ },
  { type: "keyword", value: "try", test: /try/ },
  { type: "keyword", value: "catch", test: /catch/ },
  { type: "keyword", value: "finally", test: /^finally$/ },
  { type: "keyword", value: "for", test: /for/ },
  { type: "keyword", value: "while", test: /while/ },
  { type: "keyword", value: "do", test: /do/ },
  { type: "keyword", value: "var", test: /var/ },
  { type: "keyword", value: "let", test: /let/ },
  { type: "keyword", value: "const", test: /const/ },
  { type: "keyword", value: "function", test: /function/ },
  { type: "keyword", value: "class", test: /^class$/ },
  { type: "keyword", value: "extends", test: /^extends$/ },
  { type: "keyword", value: "import", test: /^import$/ },
  { type: "keyword", value: "export", test: /^export$/ },
  { type: "keyword", value: "from", test: /from/ },
  { type: "keyword", value: "as", test: /as/ },
  { type: "keyword", value: "new", test: /new/ },
  { type: "keyword", value: "typeof", test: /typeof/ },
  { type: "keyword", value: "instanceof", test: /^instanceof$/ },
  { type: "keyword", value: "in", test: /^in$/ },
  { type: "keyword", value: "void", test: /^void$/ },
  { type: "keyword", value: "delete", test: /^delete$/ },
  { type: "keyword", value: "await", test: /^await$/ },
  { type: "keyword", value: "async", test: /^async$/ },
  { type: "keyword", value: "yield", test: /^yield$/ },
  { type: "keyword", value: "super", test: /^super$/ },
  { type: "keyword", value: "this", test: /^this$/ },
  { type: "keyword", value: "with", test: /^with$/ },
  { type: "builtin", value: "Math", test: /^Math$/ },
  { type: "builtin", value: "JSON", test: /^JSON$/ },
  { type: "builtin", value: "Date", test: /^Date$/ },
  { type: "builtin", value: "RegExp", test: /^RegExp$/ },
  { type: "builtin", value: "Promise", test: /^Promise$/ },
  { type: "builtin", value: "Array", test: /^Array$/ },
  { type: "builtin", value: "Object", test: /^Object$/ },
  { type: "builtin", value: "Function", test: /^Function$/ },
  { type: "builtin", value: "Map", test: /^Map$/ },
  { type: "builtin", value: "Set", test: /^Set$/ },
  { type: "builtin", value: "WeakMap", test: /^WeakMap$/ },
  { type: "builtin", value: "WeakSet", test: /^WeakSet$/ },
  { type: "builtin", value: "Symbol", test: /^Symbol$/ },
  { type: "builtin", value: "BigInt", test: /^BigInt$/ },
  { type: "builtin", value: "Error", test: /^Error$/ },
  { type: "builtin", value: "parseInt", test: /^parseInt$/ },
  { type: "builtin", value: "parseFloat", test: /^parseFloat$/ },
  { type: "builtin", value: "isNaN", test: /^isNaN$/ },
  { type: "builtin", value: "isFinite", test: /^isFinite$/ },
  { type: "builtin", value: "eval", test: /^eval$/ },
  { type: "builtin", value: "encodeURI", test: /^encodeURI$/ },
  { type: "builtin", value: "decodeURI", test: /^decodeURI$/ },
  { type: "builtin", value: "setTimeout", test: /^setTimeout$/ },
  { type: "builtin", value: "setInterval", test: /^setInterval$/ },
  { type: "builtin", value: "clearTimeout", test: /^clearTimeout$/ },
  { type: "builtin", value: "clearInterval", test: /^clearInterval$/ },
  { type: "builtin", value: "window", test: /window/ },
  { type: "builtin", value: "document", test: /document/ },
  { type: "builtin", value: "console", test: /console/ },
  { type: "word", value: null, test: /[a-zA-Z_$][a-zA-Z0-9_$]*/ /*},
];
*/